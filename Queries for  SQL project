CREATE DATABASE MUSIC_STORE;
use MUSIC_STORE;

/*who is the senior most employee based on job title?*/
SELECT * from employee
order by levels desc
limit 1;

/* which countries has the most invoices?*/

SELECT count(*) as b, billing_country
from invoice
group by billing_country
order by b desc;

/*what are top 3 values of total invoices?*/

select total from invoice
order by total desc
limit 3;

/*which city has the best customer ,we would like to throw a promotional festival
in the city we made the most money. write a query that returns one city that has highest 
sum of voice totals, return both the city names and sum of all invoice totals?*/

SELECT SUM(total) as invoice_total , billing_city
from invoice
group by billing_city
order by invoice_total desc;

/*who is best customer , the customer who has spent the most money
will be declared as the best customer ,write a query that returns
 the person has spent the most money*/
 
 select * from customer;
 select  * from invoice;
 
 
 
 SELECT customer.customer_id, SUM(invoice.total) AS total_spent
FROM customer
join invoice  ON customer.customer_id = invoice.customer_id
GROUP BY customer.customer_id
ORDER BY total_spent DESC
LIMIT 1;

/* Write query to return the email, first name, last name, & Genre
of all Rock Music listeners. Return your list ordered alphabetically
by email starting with A*/

SELECT DISTINCT email,  first_name, last_name
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
WHERE track_id IN (
SELECT track_id FROM track
JOIN genre ON track.genre_id = genre.genre_id
WHERE genre.name LIKE 'Rock'
)
ORDER BY email; 

/*Let's invite the artists who have written the most rock music in
our dataset. Write a query that returns the Artist name and total
track count of the top 10 rock bands*/


SELECT artist.name, COUNT(*) as total_tracks
FROM track
JOIN album2 ON album2.album_id = track.album_id
JOIN artist ON artist.artist_id = album2.artist_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name = 'rock'
GROUP BY artist.name
ORDER BY total_tracks DESC
LIMIT 10;

select * from album2;

/*Q3: Return all the track names that have a song length longer than
the average song length. Return the Name and Milliseconds for
each track. Order by the song length with the longest songs listed
first.*/

SELECT name, milliseconds
FROM track
WHERE milliseconds > (
SELECT AVG (milliseconds) AS avg_track_length
FROM track)
ORDER BY milliseconds DESC;
